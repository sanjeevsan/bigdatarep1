import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


//use retail data D11,D12,D01 and D02


public class GrossProfit {

	// Mapper Class	
	
	   public static class grossmap extends Mapper<LongWritable,Text,Text,Text>
	   {
	      public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException
	      {
	    	  try{
		            String[] str = value.toString().split(";");
		            String mykey = str[5];
		            String sales = str[8];
		            String cost=str[7];
		            String myValue = cost + ','+sales ;
		            context.write(new Text(mykey), new Text(myValue));
		         }
	         catch(Exception e)
	         {
	            System.out.println(e.getMessage());
	         }
	      }
	   }

	   //Reducer class
		
	   public static class Grossred extends Reducer<Text,Text,Text,Text>
	   {
		   	Long prft=(long) 0;
			String myval="";
	      public void reduce(Text key, Iterable <Text> values, Context context) throws IOException, InterruptedException
	      {
	    	         
		         for (Text val : values)
		         {
		        	 String[] token = val.toString().split(",");
		        	 
		        	 {

		        		 Long value2 = Long.parseLong(token[1]);
		        		 Long value1 = Long.parseLong(token[0]);
		        		 prft = value2 - value1;
		        		 myval = String.format("%d", prft);
		        		 
		        	 }
		      
				
				context.write(new Text(key), new Text(myval));
	      }
      
	   }
	   }

//Main class
	   
	   public static void main(String[] args) throws Exception {
			
			Configuration conf = new Configuration();
			Job job = Job.getInstance(conf, "Highest value single tranx");
		    job.setJarByClass(GrossProfit.class);
		    job.setMapperClass(grossmap.class);
		    job.setReducerClass(Grossred.class);
		  //  job.setNumReduceTasks(0);
		    job.setMapOutputKeyClass(Text.class);
		    job.setMapOutputValueClass(Text.class);
		    job.setOutputKeyClass(Text.class);
		    job.setOutputValueClass(Text.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);
		  }
}

