import java.io.*;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;



public class Errorlog {
	public static class map extends Mapper<LongWritable,Text,Text,Text>{
		public void mapper(LongWritable key,Text value,Context context)
		{
			try{
				String[] str=value.toString().split(" ");
				String str1=new String(str[2]);
				String str2=new String(str[3]);
				context.write(new Text(str1), new Text(str2));
			}
			catch(Exception e){
				System.out.println(e);
			}
		}
	}
	public static class reduce extends Reducer<Text,Text,Text,IntWritable>{
		public void reducee(Text key1,Iterable<Text> value1,Context context) throws IOException, InterruptedException{
			int count=0;
			for(Text value2:value1){
				if(value2.equals("[ERROR]")){
					count=+1;
					
				}
			}
		
			context.write(key1,new IntWritable(count));
		}
	}
	public static void main(String[] args) throws Exception {
	    Configuration conf = new Configuration();
	    //conf.set("name", "value")
	    //conf.set("mapreduce.input.fileinputformat.split.minsize", "134217728");
	    Job job = Job.getInstance(conf, "Volume Count");
	    job.setJarByClass(Errorlog.class);
	    job.setMapperClass(map.class);
	    //job.setCombinerClass(ReduceClass.class);
	    job.setReducerClass(reduce.class);
	    job.setNumReduceTasks(2);
	    job.setMapOutputKeyClass(Text.class);
	    job.setMapOutputValueClass(Text.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    System.exit(job.waitForCompletion(true) ? 0 : 1);
	  }

}

