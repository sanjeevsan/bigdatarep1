import java.io.*;

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.conf.*;

import org.apache.hadoop.fs.*;

import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;

import org.apache.hadoop.util.*;
/* Find out the top viable products and the top product subclass for the age group A, B, C etc.....
 *  Data should be taken for all the 4 months
 *
													viable = sales - cost(8-9)		product sub class is on 5
													age group = partitioner column				*/
						/* PARTITIONER CLASS EXAMPLE */
				
public class topviable extends Configured implements Tool
{
   //Map class
	
   public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
   {
      public void map(LongWritable key, Text value, Context context)
      {
         try{
            String[] str = value.toString().split(";");
            long sales =Long.parseLong(str[8]);
            long cost = Long.parseLong(str[7]);
            long viable = sales-cost;
            String proid=str[4];
           String age = str[2];
            
            if(viable>0)
            {
            	String myval=viable +" ,"+ age;
            
            context.write(new Text(proid), new Text(myval));
         }
         }
         catch(Exception e)
         {
            System.out.println(e.getMessage());
         }
      }
   }
   
   //Reducer class
	
   public static class ReduceClass extends Reducer<Text,Text,Text,Text>
   {
      
      public void reduce(Text key, Iterable <Text> values, Context context) throws IOException, InterruptedException
      {
    	//  LongWritable val1=new LongWritable();
			
         for (Text val : values)
         {
        	context.write(key, val);
         }
			
         
      }
   }
   
   //Partitioner class
	
   public static class CaderPartitioner extends
   Partitioner < Text,Text>
   {
      @Override
      public int getPartition(Text key,Text value, int numReduceTasks)
      {
              
         String[] val=value.toString().split(",");
         String age=val[1];
         if(age.contains("A"))
         {
            return 0;
         }			
         else if(age.contains("B"))
         {
            return 1 ;
         }
         else if(age.contains("C"))
         {
            return 2 ;
         }
         else if(age.contains("D"))
         {
            return 3 ;
         }
         else if(age.contains("E"))
         {
            return 4 ;
         }
         else if(age.contains("F"))
         {
            return 5 ;
         }
         else if(age.contains("G"))
         {
            return 6 ;
         }
         else if(age.contains("H"))
         {
            return 7 ;
         }
         else if(age.contains("I"))
         {
            return 8 ;
         }
         else 
         {
            return 9 ;
         }
         
      }
   }
   

   public int run(String[] arg) throws Exception
   {
	
	   
	  Configuration conf = new Configuration();
	  Job job = Job.getInstance(conf);
	  job.setJarByClass(topviable.class);
	  job.setJobName("Top viable products");
      FileInputFormat.setInputPaths(job, new Path(arg[0]));
      FileOutputFormat.setOutputPath(job,new Path(arg[1]));
		
      job.setMapperClass(MapClass.class);
		
      job.setMapOutputKeyClass(Text.class);
      job.setMapOutputValueClass(Text.class);
      
      //set partitioner statement
		
      job.setPartitionerClass(CaderPartitioner.class);
      job.setReducerClass(ReduceClass.class);
      job.setNumReduceTasks(10);
      job.setMapOutputKeyClass(Text.class);
	    job.setMapOutputValueClass(Text.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(Text.class);
		
      System.exit(job.waitForCompletion(true)? 0 : 1);
      return 0;
   }
   
   public static void main(String ar[]) throws Exception
   {
      ToolRunner.run(new Configuration(), new topviable(),ar);
      System.exit(0);
   }
}
