import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class wordcount {
	public static class wordmap extends Mapper<LongWritable,Text,Text,IntWritable>{
		public final static IntWritable one = new IntWritable(1);
		Text word = new Text();
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException  {
		StringTokenizer itr = new StringTokenizer(value.toString());	
		while(itr.hasMoreTokens()){
			String myword = itr.nextToken();
			String mywo = myword.toLowerCase();
			word.set(mywo);
			context.write(word, one);
		}
		}
	}
 public static class wordred extends Reducer<Text,IntWritable,Text,IntWritable>	{
	 public void reducer(Text tx,IntWritable in,Context context){
		 
	 }
 }

	public static void main(String[] args) throws Exception {
	    Configuration conf = new Configuration();
	    
	    Job job = Job.getInstance(conf, "Offence percentage count");
	    job.setJarByClass(wordcount.class);
	    job.setMapperClass(wordmap.class);
	    // job.setCombinerClass(avgred.class);
	    job.setReducerClass(wordred.class);
	    job.setNumReduceTasks(1);
	    job.setMapOutputKeyClass(Text.class);
	    job.setMapOutputValueClass(IntWritable.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    System.exit(job.waitForCompletion(true) ? 0 : 1);
	  }
}

